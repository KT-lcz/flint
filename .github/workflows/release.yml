name: Release Binaries

# This workflow runs when a new tag like 'v1.0.0' is pushed.
on:
  push:
    tags:
      - 'v*'

jobs:
  # --- JOB 1: Build binaries for all target platforms ---
  build:
    name: Build for ${{ matrix.os }}/${{ matrix.arch }}
    strategy:
      # Define the exact combinations of OS, architecture, and runner you need.
      matrix:
        include:
          - os: darwin
            arch: arm64
            runner: MacBook-Pro
          - os: linux
            arch: arm64
            runner: MacBook-Pro
          - os: linux
            arch: amd64
            runner: hypr

    # Use the runner specified in the matrix.
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.0'

      - name: Install Native Dependencies (Linux AMD64 only)
        # For the native linux build, we need to install libvirt development headers.
        if: matrix.os == 'linux' && matrix.arch == 'amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libvirt-dev pkg-config

      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Build Web UI
        # This step runs for all jobs, creating the frontend assets.
        run: |
          cd web
          bun install
          bun run build
          cd ..

      - name: Build Binary
        env:
          # Set Go environment variables for the target platform.
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
          # For native macOS build, specify where Homebrew's libraries are.
          PKG_CONFIG_PATH: ${{ matrix.os == 'darwin' && '/opt/homebrew/lib/pkgconfig' || '' }}
        run: |
          # --- Special Case: Build linux/arm64 using a Docker container ---
          if [[ "${{ matrix.os }}" == "linux" && "${{ matrix.arch }}" == "arm64" ]]; then
            echo "--- Building linux/arm64 via Docker ---"
            docker run --rm --platform linux/arm64 \
              -v "$PWD":/src \
              -w /src \
              debian:bullseye \
              bash -c ' \
                set -e && \
                export DEBIAN_FRONTEND=noninteractive && \
                apt-get update && \
                apt-get install -y build-essential pkg-config libvirt-dev wget && \
                export GO_VERSION="1.25.0" && \
                wget "https://golang.org/dl/go${GO_VERSION}.linux-arm64.tar.gz" && \
                tar -C /usr/local -xzf "go${GO_VERSION}.linux-arm64.tar.gz" && \
                export PATH="/usr/local/go/bin:${PATH}" && \
                echo "--- Compiling Go binary inside container ---" && \
                go mod download && \
                go build -ldflags="-s -w" -o flint . \
              '
          # --- Default Case: Build natively (for darwin/arm64 and linux/amd64) ---
          else
            echo "--- Native build for ${{ matrix.os }}/${{ matrix.arch }} ---"
            # We use `go build` directly to avoid `make install` trying to use `sudo`.
            go build -ldflags="-s -w" -o flint .
          fi

      - name: Package Binary
        run: |
          zip -j flint-${{ matrix.os }}-${{ matrix.arch }}.zip flint

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: flint-binaries
          path: flint-${{ matrix.os }}-${{ matrix.arch }}.zip

  # --- JOB 2: Create the GitHub Release after all builds are done ---
  release:
    name: Create GitHub Release
    needs: build # This job only runs if the 'build' job succeeds.
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release.

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          name: flint-binaries
          path: artifacts # Download all zips into an 'artifacts' directory

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # This action uses the tag that triggered the workflow as the release name.
          # It automatically generates release notes from your commits.
          files: artifacts/*.zip # Upload all zip files from the artifacts directory.
